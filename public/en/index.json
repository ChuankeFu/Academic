[{"authors":null,"categories":null,"content":"I am a PhD student in animal breeding at Huazhong Agricultural University. My research interests include genomic selection and machine learning in animal breeding. I\u0026rsquo;m familiar with several programing languages: Python, R and Rcpp(C++).\n","date":1554595200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/en/author/mei-quanshun/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/en/author/mei-quanshun/","section":"authors","summary":"I am a PhD student in animal breeding at Huazhong Agricultural University. My research interests include genomic selection and machine learning in animal breeding. I\u0026rsquo;m familiar with several programing languages: Python, R and Rcpp(C++).","tags":null,"title":"Mei Quanshun","type":"authors"},{"authors":null,"categories":null,"content":"   Table of Contents  What you will learn Program overview Courses in this program Meet your instructor FAQs    What you will learn  Fundamental Python programming skills Statistical concepts and how to apply them in practice Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas  Program overview The demand for skilled data science practitioners is rapidly growing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi.\nCourses in this program  Python basics Build a foundation in Python.   Visualization Learn how to visualize data with Plotly.   Statistics Introduction to statistics for data science.   Meet your instructor Mei Quanshun FAQs Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n  Begin the course   ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"/en/courses/example/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/en/courses/example/","section":"courses","summary":"An example of using Wowchemy's Book layout for publishing online courses.","tags":null,"title":"📊 Learn Data Science","type":"book"},{"authors":null,"categories":null,"content":"Build a foundation in Python.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz What is the difference between lists and tuples? Lists\n Lists are mutable - they can be changed Slower than tuples Syntax: a_list = [1, 2.0, 'Hello world']  Tuples\n Tuples are immutable - they can\u0026rsquo;t be changed Tuples are faster than lists Syntax: a_tuple = (1, 2.0, 'Hello world')   Is Python case-sensitive? Yes\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"17a31b92253d299002593b7491eedeea","permalink":"/en/courses/example/python/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/en/courses/example/python/","section":"courses","summary":"Build a foundation in Python.\n","tags":null,"title":"Python basics","type":"book"},{"authors":null,"categories":null,"content":"Learn how to visualize data with Plotly.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz When is a heatmap useful? Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n Write Plotly code to render a bar chart import plotly.express as px data_canada = px.data.gapminder().query(\u0026quot;country == 'Canada'\u0026quot;) fig = px.bar(data_canada, x='year', y='pop') fig.show()  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"1b341b3479c8c6b1f807553b77e21b7c","permalink":"/en/courses/example/visualization/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/en/courses/example/visualization/","section":"courses","summary":"Learn how to visualize data with Plotly.\n","tags":null,"title":"Visualization","type":"book"},{"authors":null,"categories":null,"content":"Introduction to statistics for data science.\n  1-2 hours per week, for 8 weeks\nLearn The general form of the normal probability density function is:\n$$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi} } e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} $$\n The parameter $\\mu$ is the mean or expectation of the distribution. $\\sigma$ is its standard deviation. The variance of the distribution is $\\sigma^{2}$.   Quiz What is the parameter $\\mu$? The parameter $\\mu$ is the mean or expectation of the distribution.\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"6f4078728d71b1b791d39f218bf2bdb1","permalink":"/en/courses/example/stats/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/en/courses/example/stats/","section":"courses","summary":"Introduction to statistics for data science.\n","tags":null,"title":"Statistics","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"/en/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/en/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":[],"categories":["shiny","online"],"content":"\r\r🙀大家好，从本节开始，我将给大家分享 blupADC-online (在线版)的使用说明。可能有同学会问：既然已经有了blupADC 这个package了，那么为什么还要开发blupADC-online 呢？\n其实，blupADC-online可以看成是blupADC package的简化版。凡是blupADC-online 能实现的功能， blupADCpackage均能实现。但是，考虑到部分用户可能对R不太了解，因此我们想到了开发blupADC-online 。通过blupADC-online ，用户即使没有编程基础也能很快的完成相应的分析💯。\n本节，我们给大家带来的是如何通过blupADC-online 完成DMU相关的分析。\n✋登录\r在浏览器栏直接输入网址: http://47.95.251.15:443/sample-apps/blupADC/ 即可登录到blupADC-online主界面，如下所示：\n首先我们在菜单栏点击DMU图标，即可发现有三个子菜单，从上到下依次是：\nDIR、SOL 和 Run DMU。本节的重点就是介绍这三个子菜单界面。\n如果大家事先已经了解过run_DMU 函数的话，那么本节内容可能对大家来说就比较熟悉了。如果没有事先了解也没关系，因为相关的操作还是非常简单的。\n\r✋DIR界面\r点击DIR菜单，我们就能进入 DIR界面。DIR界面的主要功能是生成 DMU格式的参数文件。下面我们来对界面内的各个参数进行逐一讲解：\nBasic information\r\rNumber of trait: 要分析的性状的数目\rNumber of integer variable: 表型数据中，整型变量的个数\rName of genetic effect: 遗传效应的名称(一般为动植物个体Id)\rUpload colnames of phenotype data: 上传表型数据的列名文件。文件格式如下所示：\r\rNote: 列名文件的格式为：n行1列。每行代表的是表型数据的列名。\n\rFile path and name\r\rRelationship file path: 亲缘关系文件的路径\n\rRelationship file name: 亲缘关系文件的名称。\n针对不同的Analysis model，我们需要提供不同的亲缘关系文件。具体对应关系为：\n\rPBLUP_A: 亲缘关系文件为系谱文件\rGBLUP_A: 亲缘关系文件为基因组亲缘关系矩阵的逆矩阵文件\rGBLUP_AD: 亲缘关系文件为基因组亲缘关系矩阵的逆矩阵文件\rSSBLUP_A: 亲缘关系文件为系谱文件及基因组亲缘关系矩阵文件\r\rPhenotype file path: 表型文件的路径\n\rPhenotype file name: 表型文件的名称\n\r\r\rDMU parameter\r\rDMU module: DMU进行遗传评估时所选用的模块，默认为 dmuai 。\n\rDMU algorithm code: 方差组分估计所用的算法，默认为 1。\n\rAnalysis model: 进行遗传评估所选用的模型。可选模型包括：\n\rPBLUP_A: 系谱加性效应模型\rGBLUP_A: 基因组加性效应模型\rGBLUP_AD:基因组加性-显性效应模型\rSSBLUP_A:一步法加性效应模型\r\r\r当用户上传表型数据的列名文件后，当前界面内便会新增几个窗口，如下：\n用户可以通过设置Number of trait来调整小窗口的个数。\ne.g. 当设置Number of trait为3时，就会生成3个小窗口，如下所示：\n用户可以在窗口内输入想要分析的性状名称及对应的固定效应、随机效应和协变量效应的名称。为了方便用户输入，选择性状和效应名称时可通过下拉菜单选取，如下：\n下面以一个具体的例子进行说明：\ne.g. 想要分析的性状为：ADG ;\n固定效应包括： Sex 和 Breed;\n随机效应包括Id ;\n协变量效应包括：Age_at_off_test。\n那么我们只需要在窗口内输入对应的信息即可，如下：\n输入完相应的效应后，在界面的正下方会实时显示所生成的 dir 参数文件内容，如下所示：\n用户可以通过下方的 Download DIR按键即可将生成的 dir 文件下载到本地。\n\r\r✋SOL界面\r点击左侧的SOL子菜单，我们就能进入SOL界面。\nSOL界面的主要功能是整理DMU输出的结果，快速得到EBV、残差、校正表型和DEBV等结果。下面我们来对界面内的各个参数进行逐一讲解：\n\rNumber of trait: 要分析的性状的数目\rGenetic number in SOL file: SOL文件中，遗传效应所对应的数字代码\rName of genetic effect: 遗传效应的名称(一般为动植物个体Id)\r\rPhenotype\r\rUpload colnames of phenotype data: 上传表型数据的列名文件。\rUpload phenotype data: 上传表型数据文件\r\r\rDEBV(可选:当需要计算DEBV时，才需要上传相应的文件。)\r\rUpload pedigree file: 上传系谱数据文件\rUpload subset id: 上传需要计算DEBV的个体号数据文件\r\r\rDMU result\r\rUpload SOL file: 上传DMU输出的SOL文件\rUpload RESIDUAL file: 上传DMU输出的RESIDUAL文件\rUpload PAROUT file: 上传DMU输出的PAROUT 文件\r\r和之前的类似，当我们上传了表型数据的列名文件后，当前界面内同样会新增几个窗口，如下：\n当我们输入了对应的性状名称后，界面正下方就会以表格的形式 实时显示 个体对应的EBV, 残差，校正表型和 DEBV，如下：\n用户可以在表格内轻松的完成查询、排序等操作。\n用户可以通过下方的 Download corrected phe按键即可将校正表型文件下载到本地。\n\r\r✋Run dmu界面\r点击左侧的Run DMU子菜单，我们就能进入Run DMU 界面。\nRun DMU界面的主要功能是快速帮我们完成DMU相关的分析。其实，Run DMU界面的功能可以看成是 DIR界面和 SOL界面功能的集合体。不过，二者最重要的区别是，Run DMU界面能自动帮我们调用DMU软件并完成相应的分析。\n总结起来就是：通过Run DMU 界面，我们只需要提供相关的性状名称和表型、系谱等数据文件后，就能得到最终的个体育种值、残差、校正表型和DEBV等结果。\nRun DMU 界面内的各个参数在 DIR界面和SOL界面内都有详细讲解，这里就不再赘述了。\n完成了前期的数据准备工作后，用户只需要点击 Run DMU 按键，就能开始DMU的分析了。\n由于不同数据量的分析时间是不同的，因此需要耐心的等待。通常情况下，几分钟就能得到结果。结果如下所示：\n用户通过点击下方的 Download EBV按键即可将生成的文件保存到本地。\n\r","date":1619049600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619104301,"objectID":"bf4ac938362b150d3a2b57d398fdbc86","permalink":"/en/post/2021-04-22-blupadc-online-dmu/online_dmu/","publishdate":"2021-04-22T00:00:00Z","relpermalink":"/en/post/2021-04-22-blupadc-online-dmu/online_dmu/","section":"post","summary":"blupADC-online 运行DMU","tags":[],"title":"blupADC 在线版- 使用说明1","type":"post"},{"authors":["qsmei"],"categories":["BLUPf90"],"content":"\r\r👻在前面的章节，我们已经讲述了如何在R中调用DMU软件并完成相应的分析。本章，我们将讲述如何通过BLUP_ADC中的run_BLUPF90函数，在R中调用BLUPF90软件并完成数据分析。为了方便用户的使用，我们已经尽可能地将 run_BLUPF90函数中的参数 和 run_DMU函数中的参数进行了统一。\n接下来，我们还是用一个简单的例子看看该函数的用法:\nlibrary(blupADC)\rrun_BLUPF90( phe_col_names=c(\u0026quot;Id\u0026quot;,\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;,\u0026quot;Litter\u0026quot;,\u0026quot;Trait1\u0026quot;,\u0026quot;Trait2\u0026quot;,\u0026quot;Age\u0026quot;), #表型数据的列名\rtarget_trait_name=c(\u0026quot;Trait1\u0026quot;), #目标性状名称\rfixed_effect_name=list(c(\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;)), #固定效应名称\rrandom_effect_name=list(c(\u0026quot;Id\u0026quot;,\u0026quot;Litter\u0026quot;)), #随机效应名称\rcovariate_effect_name=list(c(\u0026quot;Age\u0026quot;)), #协变量名称\rphe_path=\u0026quot;D:/test_code/BLUP_ADC_code/DMU_example\u0026quot;, #表型数据路径\rphe_name=\u0026quot;dmu_phe.txt\u0026quot;, #表型数据名称\ranalysis_model=\u0026quot;PBLUP_A\u0026quot;, #分析方法\rrelationship_path=\u0026quot;D:/test_code/BLUP_ADC_code/DMU_example\u0026quot;, #亲缘关系文件路径\rrelationship_name=\u0026quot;Blupf90_ped.txt\u0026quot;, #亲缘关系文件名称\routput_result_path=\u0026quot;C:/Users/26564/Desktop/BLUPF90\u0026quot;, #BLUPF90结果保存路径\routput_ebv_path=\u0026quot;C:/Users/26564/Desktop/BLUPF90\u0026quot;, #EBV结果保存的路径\routput_ebv_name=\u0026quot;test\u0026quot;, #EBV结果保存的文件名\rBLUPf90_software_path=\u0026quot;D:/test_code/BLUPf90_software\u0026quot; #BLUPF90软件的路径\r)\r通过上面的这个小脚本，我们即能完成BLUPF90的单性状模型的计算。与上一节的介绍的run_DMU函数类似，如果我们想完成双性状模型的计算，只需要在上面的脚本的基础上稍作修改就能实现目的。具体代码如下：\nlibrary(blupADC)\rrun_BLUPF90( phe_col_names=c(\u0026quot;Id\u0026quot;,\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;,\u0026quot;Litter\u0026quot;,\u0026quot;Trait1\u0026quot;,\u0026quot;Trait2\u0026quot;,\u0026quot;Age\u0026quot;), #表型数据的列名\rtarget_trait_name=c(\u0026quot;Trait1\u0026quot;,\u0026quot;Trait2\u0026quot;), #目标性状名称\rfixed_effect_name=list(c(\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;),c(\u0026quot;Sex\u0026quot;)), #固定效应名称\rrandom_effect_name=list(c(\u0026quot;Id\u0026quot;,\u0026quot;Litter\u0026quot;),c(\u0026quot;Id\u0026quot;)), #随机效应名称\rcovariate_effect_name=list(c(\u0026quot;Age\u0026quot;),NULL), #协变量名称\rphe_path=\u0026quot;D:/test_code/BLUP_ADC_code/DMU_example\u0026quot;, #表型数据路径\rphe_name=\u0026quot;dmu_phe.txt\u0026quot;, #表型数据名称\ranalysis_model=\u0026quot;PBLUP_A\u0026quot;, #分析方法\rrelationship_path=\u0026quot;D:/test_code/BLUP_ADC_code/DMU_example\u0026quot;, #亲缘关系文件路径\rrelationship_name=\u0026quot;Blupf90_ped.txt\u0026quot;, #亲缘关系文件名称\routput_result_path=\u0026quot;C:/Users/26564/Desktop/BLUPF90\u0026quot;, #BLUPF90结果保存路径\routput_ebv_path=\u0026quot;C:/Users/26564/Desktop/BLUPF90\u0026quot;, #EBV结果保存的路径\routput_ebv_name=\u0026quot;test\u0026quot;, #EBV结果保存的文件名\rBLUPf90_software_path=\u0026quot;D:/test_code/BLUPf90_software\u0026quot; #BLUPF90软件的路径\r)\r接下来，我们将对run_BLUPF90 中特有的参数进行讲解，剩余的参数大家可移步 R package:blupADC-使用说明6 进行查看，相同参数的用法和含义均是一模一样的。\n💫特有参数\r\r参数1：blupf90_algorithm\r\rBLPUF90进行方差组分估计时选用的算法，character类型。可选算法包括：\n“AI_REML”\n\r“EM_REML”\n\r\r默认算法为：“AI_REML”\n\r参数2：provided_blupf90_prior_file_path\r\r用户提供的BLUPF90格式的方差组分-PRIOR文件的路径，character类型。\nNote:需要注意的一点是，BLUPF90格式的PRIOR文件和DMU格式的PRIOR文件是不相同的。关于二者的差异，以后有时间会再出一篇文章进行讲解，这里就不再赘述了。\n\r参数3：provided_blupf90_prior_file_name\r\r用户提供的BLUPF90格式的方差组分-PRIOR文件的名称，character类型。\n\r参数4：provided_blupf90_prior_effect_name\r\r用户提供的PRIOR文件中，与方差组分对应的各个随机效应名称，character类型。\n\r参数5：BLUPf90_software_path\r\rBLUPF90软件在本地的路径，character类型。\n\r","date":1618963200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618991259,"objectID":"6f5abcf16f905537acfeb313b83dab09","permalink":"/en/post/2021-04-20-r-package-blup-adc-run-blupf90/blupf90/","publishdate":"2021-04-21T00:00:00Z","relpermalink":"/en/post/2021-04-20-r-package-blup-adc-run-blupf90/blupf90/","section":"post","summary":"R里运行BLUPF90软件并完成相应的分析","tags":[],"title":"R package:blupADC-使用说明7","type":"post"},{"authors":[],"categories":["DMU"],"content":"\r\r🤠在讲述完各种各样的数据预处理方法后，我们正式进入到育种数据的分析层面。在目前的动植物育种领域，主要的育种软件包括但不限于以下两种：DMU和BLUPf90。这两款软件均是于上世纪80-90年代开发的，并且一直处于维护中。截至目前，两款软件的引用次数均已接近千次(实际可能更多), 这也足见这两款软件的认可度。\n但是，这两款软件均存在一个共同的缺点，就是使用起来较为麻烦(需要提供准备好的参数文件)。笔者当时学习参数文件的配置时，前前后后花费了近一个月的时间，足以见这两款软件的不友好性🥶。\n为此，我们在R中编写了相应的函数，使得用户可以轻松的完成两款软件参数文件的配置及对应的数据分析。本章我们主要讲述如何通过BLUP_ADC中的run_DMU函数，在R中调用DMU软件并完成数据分析。在下一章，我们将会讲述如何在R中调用BLUPf90软件，并完成数相应的据分析。\n同样的，我们还是用一个简单的例子看看该函数的用法:\nlibrary(blupADC)\rrun_DMU( phe_col_names=c(\u0026quot;Id\u0026quot;,\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;,\u0026quot;Litter\u0026quot;,\u0026quot;Trait1\u0026quot;,\u0026quot;Trait2\u0026quot;,\u0026quot;Age\u0026quot;), #表型数据的列名\rtarget_trait_name=c(\u0026quot;Trait1\u0026quot;), #目标性状名称\rfixed_effect_name=list(c(\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;)), #固定效应名称\rrandom_effect_name=list(c(\u0026quot;Id\u0026quot;,\u0026quot;Litter\u0026quot;)), #随机效应名称\rcovariate_effect_name=list(c(\u0026quot;Age\u0026quot;)), #协变量名称\rphe_path=\u0026quot;D:/test_code/BLUP_ADC_code/DMU_example\u0026quot;, #表型数据路径\rphe_name=\u0026quot;dmu_phe.txt\u0026quot;, #表型数据名称\ranalysis_model=\u0026quot;PBLUP_A\u0026quot;, #分析方法\rrelationship_path=\u0026quot;D:/test_code/BLUP_ADC_code/DMU_example\u0026quot;, #亲缘关系文件路径\rrelationship_name=\u0026quot;Blupf90_ped.txt\u0026quot;, #亲缘关系文件名称\rinteger_n=4, #整型变量的数目 dmu_module=\u0026quot;dmuai\u0026quot;, #dmu分析时选用的模块 output_result_path=\u0026quot;C:/Users/26564/Desktop/BLUPF90\u0026quot;, #DMU结果保存路径\routput_ebv_path=\u0026quot;C:/Users/26564/Desktop/BLUPF90\u0026quot;, #EBV结果保存的路径\routput_ebv_name=\u0026quot;test\u0026quot;, #EBV结果保存的文件名\rDMU_software_path=\u0026quot;D:/QGG-DMUv6-2/R5.2/bin\u0026quot; #DMU软件的路径\r)\r细心的同学应该能发现，上面我们完成的分析是单性状模型运算(只包括了一个目标性状)。而在实际育种分析中，多性状模型也是非常常见。在上面代码的基础上稍作修改，我们就能够非常方便的完成多性状模型的运算，如下：\nlibrary(blupADC)\rrun_DMU( phe_col_names=c(\u0026quot;Id\u0026quot;,\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;,\u0026quot;Litter\u0026quot;,\u0026quot;Trait1\u0026quot;,\u0026quot;Trait2\u0026quot;,\u0026quot;Age\u0026quot;), #表型数据的列名\rtarget_trait_name=c(\u0026quot;Trait1\u0026quot;,\u0026quot;Trait2\u0026quot;), #目标性状名称\rfixed_effect_name=list(c(\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;),c(\u0026quot;Sex\u0026quot;)), #固定效应名称\rrandom_effect_name=list(c(\u0026quot;Id\u0026quot;,\u0026quot;Litter\u0026quot;),c(\u0026quot;Id\u0026quot;)), #随机效应名称\rcovariate_effect_name=list(c(\u0026quot;Age\u0026quot;),NULL), #协变量名称\rphe_path=\u0026quot;D:/test_code/BLUP_ADC_code/DMU_example\u0026quot;, #表型数据路径\rphe_name=\u0026quot;dmu_phe.txt\u0026quot;, #表型数据名称\ranalysis_model=\u0026quot;PBLUP_A\u0026quot;, #分析方法\rrelationship_path=\u0026quot;D:/test_code/BLUP_ADC_code/DMU_example\u0026quot;, #亲缘关系文件路径\rrelationship_name=\u0026quot;Blupf90_ped.txt\u0026quot;, #亲缘关系文件名称\rinteger_n=4, #整型变量的数目 dmu_module=\u0026quot;dmuai\u0026quot;, #dmu分析时选用的模块 output_result_path=\u0026quot;C:/Users/26564/Desktop/BLUPF90\u0026quot;, #DMU结果保存路径\routput_ebv_path=\u0026quot;C:/Users/26564/Desktop/BLUPF90\u0026quot;, #EBV结果保存的路径\routput_ebv_name=\u0026quot;test\u0026quot;, #EBV结果保存的文件名\rDMU_software_path=\u0026quot;D:/QGG-DMUv6-2/R5.2/bin\u0026quot; #DMU软件的路径\r)\r接下来，我们将对run_DMU函数中的参数一一进行讲解。\n🧑‍🚀主要参数\r\r参数1：phe_path\r\r本地表型数据文件的路径，character类型。\n\r参数2：phe_name\r\r本地表型数据文件的名称，character类型。\n\r参数3：phe_col_names\r\r表型数据的列名，character类型。\n\r参数4：integer_n\r\r整型变量的数目，numeric类型。\n\r参数5：genetic_effect_name\r\r遗传效应的名称(一般为个体号)，character类型。\n\r参数6：target_trait_name\r\r目标性状的名称，character类型。\n通过添加多个性状的名称，我们即可完成多性状模型的分析，e.g. target_trait_name=c(\"Trait1\",\"Trait2\") 即可完成 Trait1 和 Trait2的双性状模型\n\r参数7：fixed_effect_name\r\r目标性状的固定效应名称，list类型。在多性状模型中，fixed_effect_name为每个性状的固定效应名称向量组成的列表结构，性状的顺序需与target_trait_name一一对应。\ne.g. 第一个性状的固定效应名称为： c(\"Sex\",\"Herd_Year_Season\")\n第二个性状的固定效应名称为：c(\"Sex\")\n那么fixed_effect_name=list(c(\"Sex\",\"Herd_Year_Season\"),c(\"Sex\"))\n\r参数8：random_effect_name\r\r目标性状的随机效应名称，list类型。在多性状模型中，random_effect_name为每个性状的随机效应名称向量组成的列表结构，性状的顺序需与target_trait_name一一对应。\ne.g. 第一个性状的随机效应名称为： c(\"Id\",\"Litter\")\n第二个性状的随机效应名称为：c(\"Id\")\n那么random_effect_name=list(c(\"Id\",\"Litter\"),c(\"Id\"))\n\r参数9：covariate_effect_name\r\r目标性状的协变量效应名称，list类型。在多性状模型中，random_effect_name为每个性状的协变量效应名称向量组成的列表结构，性状的顺序需与target_trait_name一一对应。\ne.g. 第一个性状的协变量效应名称为： c(\"Age\")\n第二个性状的协变量效应名称为：NULL (意味着无协变量)\n那么covariate_effect_name=list(c(\"Age\"),NULL)\n\r参数10：analysis_model\n遗传评估的分析模型，character类型。可选模型包括：\n\r\"PBLUP_A\" : 系谱-加性效应模型\r\"GBLUP_A\" :基因组-加性效应模型\r\"GBLUP_AD\" :基因组-加性-显性效应模型\r\"SSBLUP_A\" :一步法加性效应模型\r\"User_define\": 用户自定义模型\r\r参数11：dmu_module\nDMU分析时使用的模块，character类型。可选模块包括：\n\r\"dmuai\"\n\r\"dmu4\"\n\r\"dmu5\"\n\r\r参数12：DMU_software_path\n\r\rDMU软件在本地的路径，character类型。\n\r参数13：relationship_path\r\r提供的亲缘关系文件的路径，character类型。\n\r参数14：relationship_name\r\r提供的亲缘关系文件的名称，character类型。\n针对不同的遗传评估分析模型，我们需要提供不同类型的亲缘关系文件。针对 “PBLUP_A”模型，我们需要提供系谱文件,e.g. relationship_name=\"pedigree.txt\" ；针对\"GBLUP_A\" 或 \"GBLUP_AD\"模型，我们需要提供基因组亲缘关系矩阵的逆矩阵文件, e.g. relationship_name=c(\"G_A_inv_matrix.txt\",\"G_D_inv_matrix.txt\")；针对 \"SSBLUP_A\"模型, 我们需要同时提供系谱文件及基因组亲缘关系矩阵的文件, e.g. relationship_name=c(\"pedigree.txt\",\"G_A_matrix.txt\") 。\n\r参数15：output_result_path\r\rDMU运行结果的保存路径，character类型。\n\r参数16：output_ebv_path\r\r输出的育种值、残差及校正表型文件的保存路径，character类型。\n\r参数17：output_ebv_name\r\r输出的育种值、残差及校正表型文件的名称，character类型。\n其他参数\r\r参数18：provided_effect_file_path\r\r性状效应记录文件的路径，character类型。为了方便用户输入固定效应、随机效应及协变量效应，用户可以在本地直接提供相应的文件，格式如下所示：\n\r\rV1\rV2\rV3\rV4\rV5\rV6\rV7\rV8\rV9\r\r\r\rTrait1\r*\rSex\r*\rId\r*\rAge\r*\r\r\rTrait2\r*\rSex\rHerd_Year_Season\r*\rId\rLitter\r*\r*\r\r\r\r每类效应都用*隔开，每一列的间隔均为制表符间隔。每个性状所在的行均有4个，第1-2个*之间的效应代表的是固定效应，第2-3个* 之间的效应代表的是随机效应，第3-4个* 之间的效应代表的是协变量效应。\n\r参数19：provided_effect_file_name\r\r性状效应记录文件的名称，character类型。\n\r参数20：provided_DIR_file_path\r\r用户自己提供的DIR文件的路径，character类型。\n\r参数21：provided_DIR_file_name\r\r用户自己提供的DIR文件的名称，character类型。\n\r参数22：included_permanent_effect\r\r是否进行永久环境效应分析，logical类型，默认为FASLE。\n\r参数23：dmu_algorithm_code\r\rDMU模块内的算法代码，numeric类型。\n\r参数24：provided_prior_file_path\r\r用户提供的方差组分-PRIOR文件的路径，character类型。\n\r参数25：provided_prior_file_name\r\r用户提供的方差组分-PRIOR文件的名称，character类型。\n\r参数26：missing_value\r\r表型数据的缺失值，numeric类型，默认为 -9999。\n\r参数27：iteration_criteria\r\r方差组分迭代收敛的标准，numeric类型，默认为 1.0e-7。\n\r参数28：genetic_effect_number\r\rSOL文件中，遗传效应所代表的数字，numeric类型，默认为4。\n\r参数29：residual_cov_trait\r\r残差协方差约束为0的性状，list类型。e.g. 将Trait1和Trait2的残差协方差约束为0，residual_cov_trait=list(c(\"Trait1\",\"Trait2\"))\n\r参数30：selected_id\r\r只输出这部分个体的育种值、残差及校正表型，character类型。\n\r参数31：cal_debv\r\r是否计算DEBV，logical类型，默认为FALSE。\n\r参数32：debv_pedigree_path\r\r计算DEBV时，提供的系谱文件的路径，character类型。\n\r参数33：debv_pedigree_name\r\r计算DEBV时，提供的系谱文件的名称，character类型。\n\r\r","date":1618876800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618914678,"objectID":"568fe221a71673a1579e9fe2f4832516","permalink":"/en/post/2021-04-20-r-package-blup-adc-run-dmu/run_dmu/","publishdate":"2021-04-20T00:00:00Z","relpermalink":"/en/post/2021-04-20-r-package-blup-adc-run-dmu/run_dmu/","section":"post","summary":"R中运行DMU软件并完成相应的分析","tags":[],"title":"R package:blupADC-使用说明6","type":"post"},{"authors":[],"categories":["Relationship matrix"],"content":"\r\r🙉在动植物育种中，亲缘关系矩阵的构建是其中的关键步骤。在本章，我们将主要介绍如何利用blupADC中的cal_kinship函数完成各种亲缘关系矩阵的构建，包括：加性亲缘关系矩阵(系谱，基因组，一步法)及显性亲缘关系矩阵(系谱，基因组，一步法)等。此外，cal_kinship函数还能方便的计算各种类型的近交系数，包括：系谱近交系数，基因组近交系数(Homozygous,Digonal)及一步法近交系数(Digonal)。\n😾首先，我们还是通过一个小例子来看该函数的用法:\nlibrary(blupADC)\rdata_hmp=data.table::fread(\u0026quot;D:/test_code/BLUP_ADC_code/test_data/data_hmp.txt\u0026quot;,data.table=F)\rdata_result=cal_kinship(\rinput_data_hmp=data_hmp, #用户输入的基因型数据\rkinship_type=c(\u0026quot;G_A\u0026quot;), #构建的亲缘关系矩阵类型\rinbred_type=c(\u0026quot;Homozygous\u0026quot;), #计算的近交系数的类型 return_result=TRUE #在R中返回结果 )\r在构建基因组亲缘关系矩阵及一步法亲缘关系矩阵的时候，我们必须要事先提供基因型数据，这部分的参数与genotype_data_format_conversion函数中的参数用法一致。具体大家可参阅之前的介绍: R package:blupADC- 使用说明1。\n完成了基因型数据的提供后，我们可以通过以下几个参数来指定构建亲缘关系矩阵类型及近交系数的类型。\n💪主要参数\r\r参数1：kinship_type\n指定构建亲缘关系矩阵的类型，character类型。可选关系矩阵类型：\n\r“G_A” :基因组加性亲缘关系矩阵\"\r“G_Domi” :基因组显性亲缘关系矩阵(按照0,1,0方式编码)\r“G_Devi” :基因组显性离差亲缘关系矩阵(按照-2q2,2pq,-2p2,方式编码)\r“H_A” :一步法加性亲缘关系矩阵\r“H_D” :一步法显性亲缘关系矩阵\r“P_A” :系谱加性亲缘关系矩阵\r“P_D” :系谱显性亲缘关系矩阵\r\r\rNote:如果计算系谱及一步法亲缘关系矩阵，必须要提供系谱数据。关于如何提供系谱数据，我们会在后面进行讲解。\n\r参数2：kinship_inverse\r\r是否计算亲缘关系矩阵的逆矩阵，logical类型，默认为FALSE。\n\r参数3：inbred_type\n指定计算的近交系数的类型，character类型。可选近交系数类型包括:\n\r“Homozygous” :根据纯合子位点计算\n\r“G_Diag” :G矩阵对角线-1\n\r“H_diag” :H矩阵对角线-1\n\r“Pedigree” :A矩阵对角线-1\n\r\r参数4：input_pedigree\n\r\r用户提供的系谱数据，data.frame或 matrix类型。具体的系谱数据格式可以参阅之前的介绍：R package:blupADC-使用说明3。\n\r参数5：pedigree_rename\r\r是否对系谱数据进行重命名,logical类型，默认为TRUE(对系谱进行重命名)。\n\r参数6：IND_geno_rename\r\r是否根据系谱的重命名结果对基因型数据中的个体进行重命名，logical类型，默认为FALSE(不进行重命名)。\n\r参数7：rename_to_origin\r\r将亲缘关系矩阵中重命名的个体号转换回原始的个体号，logical类型，默认为FALSE(不进行转换)。\n\r参数8：output_matrix_type\r\r输出亲缘关系矩阵的格式，character类型。可选参数包括：\n“col_all” :按照n*n的格式输出亲缘关系矩阵\n\r“col_three” : 按照3列矩阵的格式输出亲缘关系矩阵，第1列和第2列为个体号，第3列为亲缘系数。DMU和BLUPf90软件均需提供这种格式的亲缘关系矩阵。形如：\n\r\rV1\rV2\rV3\r\r\r\r1001\r1001\r0.989\r\r1001\r1002\r0.421\r\r1001\r1003\r0.567\r\r\r\r\r默认参数为 “col_all”\n\r参数9：output_matrix_path\r\r亲缘关系矩阵保存到本地的路径, character类型。\n\r参数10：output_matrix_name\r\r亲缘关系矩阵保存到本地的名称，character类型。\n\r🦶其他参数\r\r参数11：cpu_cores\r\r调用的cpu个数，numeric类型，默认为1。\n\r参数12：kinship_base\r\r是否按照基础群的方式构建基因组亲缘关系矩阵(p=q=0.5)，logical类型，默认为FALSE。\n\r参数13：kinship_trace\r\r是否按照矩阵迹和的方式对基因组亲缘关系矩阵进行标准化，logical类型，默认为FALSE。\n\r参数14：kinship_metafounder\r\r是否按照metafounder的方法计算一步法亲缘关系矩阵，logical类型，默认为FALSE。\n\r参数15：w\r\r构建一步法亲缘关系矩阵时G矩阵和A矩阵的比例，numeric类型，默认为0.05。\n\r参数16：gene_dropping\r\r是否使用 gene dropping 的方法构建系谱显性亲缘关系矩阵，logical类型，默认为FALSE。\n\r参数17：gene_dropping_iteration\r\rgene dropping方法的迭代次数，numeric类型，默认为1000。\n\r","date":1618704000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618734999,"objectID":"2b262ddbb9cd308cdbc924556f74a15f","permalink":"/en/post/2021-04-17-r-package-blup-adc-calculate-relationship-matrix/relationship_matrix/","publishdate":"2021-04-18T00:00:00Z","relpermalink":"/en/post/2021-04-17-r-package-blup-adc-calculate-relationship-matrix/relationship_matrix/","section":"post","summary":"计算亲缘关系矩阵(A,G and H)","tags":[],"title":"R package:blupADC-使用说明5","type":"post"},{"authors":[],"categories":["Imputaion","QC"],"content":"\r\r🤖通常来讲，我们公司拿到的原始芯片数据大都是包含缺失值且未经过质控的。而在实际的数据分析中，我们一般都要求数据是经过质控和填充。为此，blupADC中提供了genotype_data_QC_Imputation函数，可以方便我们在R中调用Plink(用于质控)和Beagle(用于填充)软件进行基因型数据的质控和填充。\n👉Note:我们需要提前下载好Plink(用于质控)和Beagle(用于填充)软件。由于Plink和Beagle在质控填充方面已经做得足够好了，因此我们并不打算用R重新实现相关功能。\n老规矩，我们还是用一个小例子来看下函数的用法:\nlibrary(blupADC)\rgenotype_data_QC_Imputation(\rinput_data_path=\u0026quot;root/genotype_data\u0026quot;, #用户输入的基因型文件路径\rinput_data_name=\u0026quot;data_hmp.txt\u0026quot;, #用户输入的基因型文件名称\rinput_data_type=\u0026quot;Hapmap\u0026quot;, #用户输入的基因型文件格式\rmethod=\u0026quot;QC_Imputation\u0026quot;, #基因型数据处理方法：质控+填充\rplink_software_path=\u0026quot;/root/software\u0026quot;, #plink软件的路径\rplink_software_name=\u0026quot;plink\u0026quot;, #plink软件的名称\rbeagle_software_path=\u0026quot;root/software\u0026quot;, #beagle软件的路径\rbeagle_software_name=\u0026quot;beagle.5.1.jar\u0026quot;, #beagle软件的名称\routput_data_path=\u0026quot;/root/result\u0026quot;, #输出基因型文件的路径\routput_data_name=\u0026quot;YY_data\u0026quot;, #输出基因型文件的名称\routput_data_type=\u0026quot;Plink\u0026quot; #输出基因型文件的格式\r)\r通过上述代码，我们即可对本地的Hapmap格式的基因型数据进行质控和填充，并将其以Plink格式并保存到本地。\n进行质控和填充时，我们必须要事先提供基因型数据，这部分的参数与genotype_data_format_conversion函数中的参数用法一致。具体大家可参阅之前的介绍: R package:blupADC- 使用说明1。\n完成了基因型数据的提供后，我们可以通过以下参数进行质控填充的相关分析。\n💙主要参数\r\r参数1：data_analysis_method\n指定基因型数据的处理方法，character类型。可选方法包括：\n\r“QC” :进行质控\n\r“Imputation” :进行填充\n\r“QC_Imputation” :先质控，后填充\n\r\r参数2：plink_software_path\n\r\rPlink软件的路径,character类型。\n\r参数3：plink_software_name\r\rPlink软件的名称,character类型。\n\r参数4：beagle_software_path\r\rBeagle软件的路径,character类型。\n\r参数5：beagle_software_name\r\rBeagle软件的名称,character类型。\n\r💜其他参数\r\r参数6：qc_snp_rate\r\r使用Plink进行质控时，SNP call rate 的阈值，numeric类型，默认为0.1。\n\r参数6：qc_ind_rate\r\r使用Plink进行质控时，IND call rate 的阈值，numeric类型，默认为0.1。\n\r参数6：qc_maf\r\r使用Plink进行质控时，MAF 的阈值，numeric类型，默认为0.05。\n\r参数6：qc_hwe\r\r使用Plink进行质控时，哈代温伯格平衡的阈值,numeric类型，默认为1e-6。\n\r参数6：beagle_ref_data_path\r\r使用beagle进行填充时，提供的reference data的路径，character类型。\n\r参数7：beagle_ref_data_name\r\r使用beagle进行填充时，提供的reference data的名称，character类型。\n\r参数8：beagle_ped_path\r\r使用beagle进行填充时，提供的系谱数据的路径，character类型。\n\r参数9：beagle_ped_name\r\r使用beagle进行填充时，提供的系谱数据的名称，character类型。\n\r","date":1618617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618664845,"objectID":"9befc2250e2b6b42cbbd8cdea72a97f1","permalink":"/en/post/2021-04-17-r-package-blup-adc-qc-imputaion/qc_imputation/","publishdate":"2021-04-17T00:00:00Z","relpermalink":"/en/post/2021-04-17-r-package-blup-adc-qc-imputaion/qc_imputation/","section":"post","summary":"基因型数据的质控与填充","tags":[],"title":"R package:blupADC-使用说明4","type":"post"},{"authors":[],"categories":["pedigree"],"content":"\r\r🦄大家好,这一节主要给大家讲述的是如何使用blupADC中的函数来进行系谱数据处理。blupADC提供的trace_pedigree函数，可以帮助我们非常方便的对系谱数据进行多种处理:包括系谱重命名、系谱追溯及系谱纠错等。\n💖同样的，我们还是用一个小例子来简单的看下该函数的用法\nlibrary(blupADC)\rdata_pedigree=data.table::fread(\u0026quot;D:/test_code/BLUP_ADC_code/test_data/ped.txt\u0026quot;,data.table=F)\rcolnames(data_pedigree)=c(\u0026quot;Offspring\u0026quot;,\u0026quot;Sire\u0026quot;,\u0026quot;Dam\u0026quot;,\u0026quot;Birth_Date\u0026quot;)\rpedigree_result=trace_pedigree(input_pedigree=data_pedigree,output_pedigree_tree=TRUE)\r## Peidgree provided has four columns,please make sure the format of pedigree data has four columns: Offspring Sire Dam Birth_Date ## Trace full generation......\r我们可以通过str查看函数的输出结果，如下所示:\nstr(pedigree_result)\r## List of 5\r## $ ped : chr [1:42149, 1:3] \u0026quot;YYHZAUT14003572\u0026quot; \u0026quot;YYHZAUT17786901\u0026quot; \u0026quot;YYHZAUT16532401\u0026quot; \u0026quot;YYHZAUT15162815\u0026quot; ...\r## ..- attr(*, \u0026quot;dimnames\u0026quot;)=List of 2\r## .. ..$ : NULL\r## .. ..$ : chr [1:3] \u0026quot;Offspring\u0026quot; \u0026quot;Sire\u0026quot; \u0026quot;Dam\u0026quot;\r## $ rename_ped :\u0026#39;data.frame\u0026#39;: 42149 obs. of 6 variables:\r## ..$ Offspring : chr [1:42149] \u0026quot;YYHZAUT14003572\u0026quot; \u0026quot;YYHZAUT17786901\u0026quot; \u0026quot;YYHZAUT16532401\u0026quot; \u0026quot;YYHZAUT15162815\u0026quot; ...\r## ..$ Generation : num [1:42149] 0 0 0 0 0 0 0 0 0 0 ...\r## ..$ Offspring_Id: int [1:42149] 1 2 3 4 5 6 7 8 9 10 ...\r## ..$ Sire_Id : num [1:42149] 0 0 0 0 0 0 0 0 0 0 ...\r## ..$ Dam_Id : num [1:42149] 0 0 0 0 0 0 0 0 0 0 ...\r## ..$ Order : int [1:42149] 1 2 3 4 5 6 7 8 9 10 ...\r## $ pedigree_tree : chr [1:42149, 1:15] \u0026quot;YYHZAUT14003572\u0026quot; \u0026quot;YYHZAUT17786901\u0026quot; \u0026quot;YYHZAUT16532401\u0026quot; \u0026quot;YYHZAUT15162815\u0026quot; ...\r## ..- attr(*, \u0026quot;dimnames\u0026quot;)=List of 2\r## .. ..$ : NULL\r## .. ..$ : chr [1:15] \u0026quot;Offspring\u0026quot; \u0026quot;Sire\u0026quot; \u0026quot;Dam\u0026quot; \u0026quot;SireSire\u0026quot; ...\r## $ rename_phenotype: NULL\r## $ error_id_set :List of 4\r## ..$ error_duplicated_id: NULL\r## ..$ error_sex_id : chr(0) ## ..$ error_breed_id : NULL\r## ..$ error_birth_date_id: NULL\r可以很明显的看到,输出结果包括以下几个部分:\n\rped: 经过处理后(纠错、追溯等)的原始系谱数据且未进行重命名\n\rrename_ped: 经过处理(纠错、追溯等)且重命名的系谱数据。第1列为原始系谱ID,第2列为个体在系谱中的代数，第3-5列为重命名后的系谱数据\n\rpedigree_tree:个体的系谱树矩阵。可以通过设置 pedigree_tree_depth指定系谱树包含的代数，默认不输出系谱树(节省时间)\n\rerror_id_set:系谱记录错误个体数据集。根据错误的种类可以分为以下4个子集\n\r\rerror_duplicated_id:相同的个体，父母却不相同\n\rerror_sex_id:个体同时出现在父亲列和母亲列\n\rerror_breed_id: 个体和父母的品种不相同(仅针对特殊格式)\n\rerror_birth_date_id: 个体的出生日期要早于父母的出生日期(需在系谱的第四列提供个体的出生日期)\n\r\r下面，我们将具体讲解trace_pedigree函数中各种参数的含义:\n💥主要参数\r\r参数1：input_pedigree\r\r用户提供的系谱数据，data.frame或 matrix类型。\n💌用户提供系谱数据需为以下几种格式中的一种，包括：\n\r3列系谱格式:\r\r\r\r\rOffspring\rSire\rDam\r\r\r\r1\rYYHZAUT19173108\rYYHZAUT17282102\rYYHZAUT16109011\r\r2\rYYHZAUT19628606\rYYHZAUT18811301\rYYHZAUT18884508\r\r3\rYYHZAUT19423809\rYYHZAUT18336401\rYYHZAUT18623508\r\r4\rYYHZAUT20898011\rYYHZAUT18718802\rYYHZAUT18859712\r\r6\rYYHZAUT20268616\rYYHZAUT19541201\rYYHZAUT18802408\r\r7\rYYHZAUT19653108\rYYHZAUT18747603\rYYHZAUT18898606\r\r\r\r\r4列系谱格式:\r\r\r\r\rOffspring\rSire\rDam\rBirth_Date\r\r\r\r1\rYYHZAUT19173108\rYYHZAUT17282102\rYYHZAUT16109011\r20190208\r\r2\rYYHZAUT19628606\rYYHZAUT18811301\rYYHZAUT18884508\r20191012\r\r3\rYYHZAUT19423809\rYYHZAUT18336401\rYYHZAUT18623508\r20190615\r\r4\rYYHZAUT20898011\rYYHZAUT18718802\rYYHZAUT18859712\r20200307\r\r6\rYYHZAUT20268616\rYYHZAUT19541201\rYYHZAUT18802408\r20200827\r\r7\rYYHZAUT19653108\rYYHZAUT18747603\rYYHZAUT18898606\r20191018\r\r\r\r\r多列系谱格式:\r\r\r\r\rOffspring\rSire\rDam\rSireSire\rDamSire\rSireSireSire\r\r\r\rYYHZAUT19682603\rYYHZAUT18498306\rYYHZAUT18881607\rYYHZAUT17517904\rYYHZAUT17060205\rYYHZAUT15421201\r\rYYHZAUT19292804\rYYHZAUT17217601\rYYHZAUT18443906\rYYHZAUT16762403\rYYHZAUT16360601\rYYHZAUT15129404\r\rYYHZAUT19215806\rYYHZAUT18412205\rYYHZAUT16113613\rYYHZAUT17412001\rYYHZAUT15289901\rYYHZAUT15288601\r\rYYHZAUT20245109\rYYHZAUT19584301\rYYHZAUT18916603\rYYHZAUT18747603\rYYHZAUT17060205\rYYHZAUT17642901\r\rYYHZAUT19528301\rYYHZAUT18537302\rYYHZAUT18643307\rYYHZAUT17603803\rYYHZAUT17656604\rYYHZAUT16766003\r\rYYHZAUT19588602\rYYHZAUT18691101\rYYHZAUT17250213\rYYHZAUT17739601\rYYHZAUT17411802\rYYHZAUT16126301\r\r\r\rNote:需要注意的是，当系谱为多列时，系谱的列名需要标注为特殊形式,e.g. SireSire:父亲的父亲, SirSireSire:父亲的父亲的父亲\n系谱数据中缺失值可以设置为: NA或0。\n同样的，为了便于用户操作，用户还可以直接提供本地系谱数据的路径和名称\n\r参数2：input_pedigree_path\r\r本地系谱数据的路径,character类型。\n\r参数3：input_pedigree_name\r\r本地系谱数据的名称，character类型。\n\r参数4：pedigree_format_conversion\r\r是否将提供的多列系谱转换到3列，logical类型。如果用户提供的系谱数据包含多列，那么用户必须设置pedigree_format_conversion=TRUE 。\n\r参数5：output_pedigree_type\r\r系谱输出的格式，character类型。可选格式包括: BLUPF90, DMU 及 Normal(未重命名)。\n\r参数6：output_pedigree_path\r\r系谱输出到本地的路径，character类型。\n\r参数7：output_pedigree_name\r\r系谱输出到本地的名称，character类型。\n\r💨其他参数\r\r参数8：dup_error_check\r\r检查相同个体的父母却不相同的错误，logical类型，默认为TRUE。\n\r参数9：sex_error_check\r\r检查个体同时出现在父亲列和母亲列的错误，logical类型，默认为TRUE。\n\r参数10：breed_error_check\r\r检查个体品种与父母品种不同的错误，logical类型，默认为FALSE。\n\r参数11：birth_date_error_check\r\r检查个体出生日期早于父母的错误，logical类型，默认为FALSE。\n\r参数12：trace_id\r\r追溯系谱记录的个体号，character类型，默认为NULL(追溯系谱中所有的个体)。\n\r参数13：trace_offspring\r\r是否追溯子代，logical类型，默认为FALSE。\n\r参数14：trace_generation\r\r追溯的代数，numeric类型，默认为5。\n\r参数15：trace_birth_date\r\r追溯出生日期晚于指定日期的个体，character类型。\n\r参数16：output_pedigree_tree\r\r是否输出系谱树，logical类型，默认为FALSE。\n\r参数17：pedigree_tree_depth\r\r系谱树的深度(系谱代数)，numeric类型，默认为3。\n\r","date":1618531200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618536763,"objectID":"922fb907c81b523391b7337b247484d8","permalink":"/en/post/2021-04-17-r-package-blup-adc-pedigree/pedigree/","publishdate":"2021-04-16T00:00:00Z","relpermalink":"/en/post/2021-04-17-r-package-blup-adc-pedigree/pedigree/","section":"post","summary":"系谱数据追溯与重命名","tags":[],"title":"R package:blupADC-使用说明3","type":"post"},{"authors":[],"categories":["Overlap"],"content":"\r\r👦大家好,这一节给大家带来的是如何使用blupADC中的Calculate_genotype_overlap函数来对基因型数据进行重复性检测。\n与之前类似，我们还是用一个小例子来简单的看下该函数的用法\nlibrary(blupADC)\rdata_hmp=data.table::fread(\u0026quot;D:/test_code/BLUP_ADC_code/test_data/data_hmp.txt\u0026quot;,data.table=F)\roverlap_result=Calculate_genotype_overlap(input_data_hmp=data_hmp)\r关于Calculate_genotype_overlap 函数中的参数介绍，我们主要介绍以下两个参数：\n\r参数1：selected_snps\r\r进行重复性检测时随机抽样的SNP的数目，numeric 类型，默认为1000。\n\r参数2：overlap_threshold\r\r判断基因型重复的阈值，numeric 类型，默认为0.95。\n当个体间的基因型overlap比例超过该阈值时，基因型就会被判定为重复的基因型。\n该函数中的其他参数均和genotype_data_format_conversion函数中的参数一致(基因型数据的输入与输出)，具体大家可参阅之前的介绍:\n具体大家可参阅之前的介绍: R package:blupADC- 使用说明1。\n","date":1618444800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618470690,"objectID":"a42f7de2d2f19abf702630ccd483378d","permalink":"/en/post/2021-04-17-r-package-blup-adc-overlap-genotype/overlap_genotype/","publishdate":"2021-04-15T00:00:00Z","relpermalink":"/en/post/2021-04-17-r-package-blup-adc-overlap-genotype/overlap_genotype/","section":"post","summary":"基因型数据重复性检测","tags":[],"title":"R package:blupADC-使用说明2","type":"post"},{"authors":[],"categories":["Format conversion"],"content":"\r\r🙀大家好,通过前一章节的学习，相信大家已经对blupADC 有了一个初步的了解了。从本节开始，我们将对blupADC中的几个重要的函数一一进行讲解。这一节主要给大家讲述的是如何使用blupADC中genotype_data_format_conversion函数来进行多种基因型格式数据的转换。\n基因型数据格式转化\r首先,我们以一个简单的小例子来看看函数的用法\nlibrary(blupADC)\rdata_ped=data.table::fread(\u0026quot;D:/test_code/BLUP_ADC_code/test_data/data.ped\u0026quot;,data.table = F)\rdata_map=data.table::fread(\u0026quot;D:/test_code/BLUP_ADC_code/test_data/data.map\u0026quot;,data.table = F)\rsum_data=genotype_data_format_conversion(\rinput_data_plink_ped=data_ped, #用户输入的 plink-ped格式数据\rinput_data_plink_map=data_map, #用户输入的 plink-map格式数据\routput_data_type=c(\u0026quot;Hapmap\u0026quot;,\u0026quot;Blupf90\u0026quot;),#输出的基因型数据格式\rreturn_result = TRUE, #在R中返回结果\rcpu_cores=1 #调用的cpu个数\r)\r下面，我们将对genotype_data_format_conversion 中的参数一一进行讲解\n🤡主要参数\r\r参数1:input_data_plink_ped\r\r用户提供的 Plink-ped格式的数据，data.frame类型。具体格式如下所示：\n\r\rV1\rV2\rV3\rV4\rV5\rV6\rV7\rV8\rV9\rV10\r\r\r\rInd1\rInd1\r0\r0\r0\r0\rC\rC\rT\rT\r\rInd2\rInd2\r0\r0\r0\r0\rC\rC\rG\rG\r\rInd3\rInd3\r0\r0\r0\r0\rA\rC\rG\rG\r\rInd4\rInd4\r0\r0\r0\r0\rC\rC\rG\rT\r\rInd5\rInd5\r0\r0\r0\r0\rC\rC\rG\rT\r\rInd6\rInd6\r0\r0\r0\r0\rA\rA\rG\rG\r\r\r\r\r参数2:input_data_plink_map\r\r用户提供的 Plink-map格式的数据，data.frame类型。具体格式如下所示：\n\r\rV1\rV2\rV3\rV4\r\r\r\r1\rSNP1842\r0.22\r224488\r\r1\rSNP2977\r0.29\r293696\r\r1\rSNP3321\r0.33\r333333\r\r1\rSNP3941\r0.72\r722623\r\r1\rSNP4138\r0.84\r838596\r\r1\rSNP4303\r0.93\r934682\r\r\r\r\r参数3:input_data_hmp\r\r用户提供的 Hapmap格式的数据，data.frame类型。具体格式如下所示\n\r\r\rrs#\ralleles\rchrom\rpos\rstrand\rassembly\rcenter\rprotLSID\rassayLSID\rpanelLSID\rQCcode\rInd1\rInd2\rInd3\rInd4\r\r\r\rSNP1\rNA\r1\r100050454\rNA\rNA\rNA\rNA\rNA\rNA\rNA\rTT\rCC\rCT\rCC\r\rSNP2\rNA\r1\r100142509\rNA\rNA\rNA\rNA\rNA\rNA\rNA\rAA\rCC\rCC\rCC\r\rSNP3\rNA\r1\r100223426\rNA\rNA\rNA\rNA\rNA\rNA\rNA\rTT\rTT\rTT\rTT\r\rSNP4\rNA\r1\r100297114\rNA\rNA\rNA\rNA\rNA\rNA\rNA\rCC\rCT\rCT\rCT\r\rSNP5\rNA\r1\r100398783\rNA\rNA\rNA\rNA\rNA\rNA\rNA\rCC\rCT\rCT\rCT\r\rSNP6\rNA\r1\r100420304\rNA\rNA\rNA\rNA\rNA\rNA\rNA\rTT\rGT\rGT\rGT\r\r\r\r\r参数4:input_data_blupf90\r\r用户提供的 BLUPF90格式数据，data.frame类型。具体格式如下所示\n\r\rV1\rV2\r\r\r\rInd1\r2221100000200\r\rInd12\r2000022222022\r\rInd13\r1011111111111\r\rInd111\r2120022211022\r\rInd125\r2111011111111\r\rInd1161\r0022200000200\r\r\r\r\r参数5:input_data_genumeric\r\r用户提供的 Numeric格式的数据，matrix(纯数字)类型。具体格式如下所示\n\r\r\rSNP1842\rSNP2977\rSNP3321\rSNP3941\rSNP4138\rSNP4303\r\r\r\rInd1\r2\r2\r2\r1\r1\r0\r\rInd2\r2\r0\r0\r0\r0\r2\r\rInd3\r1\r0\r1\r1\r1\r1\r\rInd4\r2\r1\r2\r0\r0\r2\r\rInd5\r2\r1\r1\r1\r0\r1\r\rInd6\r0\r0\r2\r2\r2\r0\r\r\r\rNote: 行为个体，列为SNP，必须包括列名和行名。\n此外，为了方便用户使用，用户还可以直接通过提供本地数据的路径、名称与数据类型即可完成数据提供这一步骤,而无需将数据读入到R里面。\n\r参数6:input_data_path\r\r用户提供的本地数据的文件路径，character类型。\n\r参数7:input_data_name\r\r用户提供的本地数据的文件名称，character类型。\nNote: 如果提供的数据类型为Plink ,那么本地文件名称不需要带后缀，eg. 本地文件名为test1.map test1.ped，我们提供文件名称为： input_data_name=\"test1\"。除了Plink格式的数据外，其他数据格式必须提供完整的名称(带后缀)。\n\r参数8:input_data_type\n用户提供的本地数据的格式，character类型。数据格式包括：\n\rHapmap\rPlink\rBlupf90\rNumeric\rVCF(需要提前安装好vcftools软件,并设置好环境变量)\r\r参数9:return_result\n\r\r是否在R中返回输出的结果，logical类型。默认为FLASE。\n此外，为了便于输出数据的保存，用户可以将数据保存到本地\n\r参数10:output_data_path\r\r输出的基因型数据保存到本地的路径，character类型。\n\r参数11:output_data_name\r\r输出的基因型数据保存到本地的文件名称，character类型。\n\r参数12:output_data_type\n用户提供的本地数据的格式，character类型。数据格式包括：\n\rHapmap\rPlink\rBlupf90\rNumeric\rVCF(需要提前安装好vcftools软件,并设置好环境变量)\r\r\r可选择同时输出多种数据格式。e.g.output_data_type=c(\"Hapmap\",\"Plink\",\"Blupf90\",\"Numeric\") 可同时输出以上4种数据类型。\n\r💨其他参数\r\r参数13:cpu_cores\r\r函数调用的cpu个数，numeric类型。默认调用1个\n\r参数14:miss_base\r\r缺失值在原基因型数据中所表示的的字符，character类型。默认为“NN”。\n\r参数15:miss_base_num\r\r数字化格式转换中缺失值转换成的数字，numeric类型。默认为 5。\n\r参数16:plink_software_path\r\rPlink软件的路径，character类型。涉及到VCF格式转换时，需要使用 Plink软件。当Plink软件的路径已加入到环境变量后，此项参数不需要再设置。\n\r参数17:plink_software_name\r\rPlink软件的名称，character类型。涉及到VCF格式转换时，需要使用 Plink软件。软件默认名称为：plink。\n\r参数18:vcftools_software_path\r\rvcftools软件的路径，character类型。涉及到VCF格式转换时，需要使用vcftools软件。当vcftools软件的路径已加入到环境变量后，此项参数不需要再设置。\n\r参数19:vcftools_software_name\r\rvcftools软件的名称，character类型。涉及到VCF格式转换时，需要使用 vcftools软件。软件默认名称为：vcftools。\n\r\r","date":1618358400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618383581,"objectID":"be9f142a87fc7a7af445f745a992860f","permalink":"/en/post/blupadc/","publishdate":"2021-04-14T00:00:00Z","relpermalink":"/en/post/blupadc/","section":"post","summary":"Convert genotype data format","tags":[],"title":"R package:blupADC-Chapter 1","type":"post"},{"authors":[],"categories":["blupADC"],"content":"\r\rblupADC\rContents\r\rOVERVIEW\n\rGETTING STARTED\n\rInstallation\rFeatures\r\rUSAGE\n\r\rOVERVIEW\rblupADC is an useful tool for handling genomic data and pedigree data in animal and plant breeding, including data format conversion, pedigree rename, kinship matrix construction and so on. In addition, blupADC provided several functions to interface with famous breeding softwares, DMU and BLUPF90. With the help of blupADC ,all of these parameter files can be automatically generated, and users can easily use these softwares.\n\r\rGETTING STARTED\r🙊Installation\rInstall blupADC on Linux or macOS\rinstall.packages(\u0026quot;blupADC_1.0.1_linux.tar.gz\u0026quot;, repos = NULL)\r\rInstall blupADC on Windows\rinstall.packages(\u0026quot;blupADC_1.0.1.zip\u0026quot;, repos = NULL)\rAfter installed successfully, the blupADC package can be loaded by typing\nlibrary(blupADC)\r\r\r❤️Features\r\rFeature 1. Convert genotype data format\rFeature 2. Detect duplicated genotype data\rFeature 3. Trace, rename and correct pedigree\rFeature 4. Quality control and imputation\rFeature 5. Construct kinship matrix\rFeature 6. Interaface with DMU\rFeature 7. Interaface with BLUPF90\r\r\r\rUsage\rblupADC provides several datasets object, including data_hmp, origin_pedigree.\nIn addition, blupADC provides several files which are saved in ~/blupADC/extdata. We can get the path of these files by typing\npaste0(system.file(package=\u0026quot;blupADC\u0026quot;) ,\u0026quot;/extdata\u0026quot;) # path of provided files\rFeature 1. Convert genotype data format (see more details)\rlibrary(blupADC)\rsum_data=genotype_data_format_conversion(\rinput_data_hmp=data_hmp, #provided hapmap data object output_data_type=c(\u0026quot;Plink\u0026quot;,\u0026quot;Blupf90\u0026quot;,\u0026quot;Numeric\u0026quot;),# output data format\rreturn_result = TRUE, # return result cpu_cores=1 # number of cpu )\r\rFeature 2. Detect duplicated genotype data (see more details)\rlibrary(blupADC)\roverlap_result=genotype_data_overlap(\rinput_data_hmp=data_hmp, #provided hapmap data object\roverlap_threshold=0.95, # threshold of duplicate return_result=TRUE #return result )\r\rFeature 3. Trace, rename and correct pedigree (see more details)\rlibrary(blupADC)\rpedigree_result=trace_pedigree(\rinput_pedigree=origin_pedigree, #provided pedigree data object\rtrace_generation=3, # trace generation\routput_pedigree_tree=TRUE # output pedigree tree\r) \r\rFeature 4. Quality control and imputation (see more details)\rlibrary(blupADC)\rgenotype_data_QC_Imputation(\rinput_data_hmp=data_hmp, #provided hapmap data object\rdata_analysis_method=\u0026quot;QC_Imputation\u0026quot;, #analysis method type,QC + imputatoin\rplink_software_path=\u0026quot;/root/software/plink\u0026quot;, # software path of plink plink_software_name=\u0026quot;plink\u0026quot;, # software name of plink beagle_software_path=\u0026quot;/root/software/beagle\u0026quot;, # software path of beagle beagle_software_name=\u0026quot;beagle.5.1.jar\u0026quot;, # software name of beagle output_data_path=\u0026quot;/root/result\u0026quot;, #output data path\routput_data_name=\u0026quot;YY_data\u0026quot;, #output data name\routput_data_type=\u0026quot;Plink\u0026quot; #output data format ) \r\rFeature 5. Construct kinship matrix (see more details)\rlibrary(blupADC)\rkinship_result=cal_kinship(\rinput_data_hmp=data_hmp, #provided hapmap data object\rkinship_type=c(\u0026quot;G_A\u0026quot;,\u0026quot;G_D\u0026quot;), #type of kinship matrix\rdominance_type=c(\u0026quot;genotypic\u0026quot;), #type of dominance effect\rinbred_type=c(\u0026quot;Homozygous\u0026quot;), #type of inbreeding coefficients\rreturn_result=TRUE) #return result \r\rFeature 6. Interface with DMU (see more details)\rlibrary(blupADC)\rdata_path=paste0(system.file(package=\u0026quot;blupADC\u0026quot;) ,\u0026quot;/extdata\u0026quot;) # path of provided files run_DMU(\rphe_col_names=c(\u0026quot;Id\u0026quot;,\u0026quot;Mean\u0026quot;,\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;,\u0026quot;Litter\u0026quot;,\u0026quot;Trait1\u0026quot;,\u0026quot;Trait2\u0026quot;), # colnames of phenotype target_trait_name=c(\u0026quot;Trait1\u0026quot;), #trait name fixed_effect_name=list(c(\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;)), #fixed effect name\rrandom_effect_name=list(c(\u0026quot;Id\u0026quot;,\u0026quot;Litter\u0026quot;)), #random effect name\rcovariate_effect_name=NULL, #covariate effect name\rphe_path=data_path, #path of phenotype file\rphe_name=\u0026quot;phenotype.txt\u0026quot;, #name of phenotype file\rinteger_n=5, #number of integer variable analysis_model=\u0026quot;PBLUP_A\u0026quot;, #model of genetic evaluation\rdmu_module=\u0026quot;dmuai\u0026quot;, #modeule of estimating variance components relationship_path=data_path, #path of relationship file relationship_name=\u0026quot;pedigree.txt\u0026quot;, #name of relationship file output_result_path=\u0026quot;/root\u0026quot;, # output path DMU_software_path=\u0026quot;/root/software/DMU/bin\u0026quot; # path of DMU software )\r\rFeature 7. Interface with BLUPF90 (see more details)\rlibrary(blupADC)\rdata_path=paste0(system.file(package=\u0026quot;blupADC\u0026quot;) ,\u0026quot;/extdata\u0026quot;) # path of provided files run_BLUPF90(\rphe_col_names=c(\u0026quot;Id\u0026quot;,\u0026quot;Mean\u0026quot;,\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;,\u0026quot;Litter\u0026quot;,\u0026quot;Trait1\u0026quot;,\u0026quot;Trait2\u0026quot;), # colnames of phenotype target_trait_name=c(\u0026quot;Trait1\u0026quot;), #trait name fixed_effect_name=list(c(\u0026quot;Sex\u0026quot;,\u0026quot;Herd_Year_Season\u0026quot;)), #fixed effect name\rrandom_effect_name=list(c(\u0026quot;Id\u0026quot;,\u0026quot;Litter\u0026quot;)), #random effect name\rcovariate_effect_name=NULL, #covariate effect name\rphe_path=data_path, #path of phenotype file\rphe_name=\u0026quot;phenotype.txt\u0026quot;, #name of phenotype file\ranalysis_model=\u0026quot;PBLUP_A\u0026quot;, #model of genetic evaluation\rrelationship_path=data_path, #path of relationship file relationship_name=\u0026quot;pedigree.txt\u0026quot;, #name of relationship file output_result_path=\u0026quot;/root\u0026quot;, # output path BLUPF90_software_path=\u0026quot;/root/software/BLUPF90\u0026quot; # path of BLUPF90 software ) \r\r\r\r\r\r","date":1618272000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618324356,"objectID":"88e29708e1342fa50512c1caee9e1eec","permalink":"/en/post/2021-04-21-r-package-rblupadc-overview/overview/","publishdate":"2021-04-13T00:00:00Z","relpermalink":"/en/post/2021-04-21-r-package-rblupadc-overview/overview/","section":"post","summary":"Overview","tags":[],"title":"R package:blupADC-Overview","type":"post"},{"authors":["Mei Quanshun"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/en/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/en/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/en/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/en/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/en/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/en/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/en/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/en/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Mei Quanshun","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/en/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/en/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Mei Quanshun","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/en/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/en/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"/en/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/en/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]